{"version":3,"sources":["webpack:///./src/components/AppRoot.js"],"names":["params","mock","AppRoot","props","data","console","log","window","HTMLIFrameElement","targetWindow","opener","contentWindow","postMessage","e","Promise","resolve","mockJdData","jdRes","axios","method","url","jd_id","job_func","plc_id","work_dura","session","responseValidate","jdResults","response","results","informOutside","jd","position_profile","setState","position","mockCvData","cvRes","cv_id","cvResults","cv","talent_profile","talent","res","serverResponse","error","toast","Error","trueResponse","err_msg","err_no","showType","state","parsed","queryString","parse","location","search","getJD","getCV","getContent","React","Component","hot"],"mappings":"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","file":"main.2565386ec6dc01c0438c.hot-update.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { hot } from 'react-hot-loader/root';\n// import ReactJson from 'react-json-view';\nimport JSONTree from 'react-json-tree';\nimport queryString from 'query-string';\nimport mockCvData from './cv.json';\nimport mockJdData from './jd.json';\nimport './AppRoot.scss';\n\nlet params = {};\nconst mock = true;\n\nclass AppRoot extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jd: null,\n      position: null,\n      cv: null,\n      talent: null,\n      error: false\n    };\n  }\n\n  componentDidMount() {\n    const parsed = queryString.parse(window.location.search);\n    console.log('query string parsed', parsed);\n    const { session, jd_id, job_func, plc_id, work_dura, cv_id } = parsed;\n    params = parsed;\n\n    if (jd_id) {\n      this.getJD();\n      return;\n    }\n    if (cv_id) {\n      this.getCV();\n      return;\n    }\n    this.setState({ error: true });\n    toast('未收到 cv_id 或 jd_id');\n  }\n\n  informOutside = (data) => {\n    try {\n      console.log('window', window);\n      console.log('HTMLIFrameElement', HTMLIFrameElement);\n      const targetWindow = window.opener || HTMLIFrameElement.contentWindow;\n      targetWindow.postMessage(data, '*');\n    } catch (e) {\n      // console.error(e);\n    }\n  };\n\n  getJD = async () => {\n    let jdRes;\n\n    if (mock) {\n      console.log('mocking');\n      jdRes = await Promise.resolve(mockJdData);\n    } else {\n      jdRes= await axios({\n        method: 'POST',\n        url: '/api/ims/profile/position',\n        data: {\n          \"header\": {},\n          \"request\": {\n            \"c\": \"\",\n            \"m\": \"\",\n            \"p\": {\n              \"jd_id\": params.jd_id,\n              \"job_func\": params.job_func,\n              \"plc_id\": params.plc_id,\n              \"work_dura\": params.work_dura,\n              \"session\": params.session\n            }\n          }\n        }\n      });\n    }\n\n    this.responseValidate(jdRes);\n\n    const jdResults = jdRes.data.response.results;\n\n    console.log('jd results', jdResults);\n    this.informOutside(jdResults);\n\n    console.log('JD 数据', jdResults.jd);\n    console.log('岗位画像数据', jdResults.position_profile);\n\n    this.setState({\n      jd: jdResults.jd,\n      position: jdResults.position_profile\n    });\n  };\n\n  getCV = async () => {\n    let cvRes;\n\n    if (mock) {\n      cvRes = await Promise.resolve(mockCvData);\n    } else {\n      cvRes = await axios({\n        method: 'POST',\n        url: '/api/ims/profile/talent',\n        data: {\n          \"header\": {},\n          \"request\": {\n            \"c\": \"\",\n            \"m\": \"\",\n            \"p\": {\n              \"cv_id\": params.cv_id,\n              \"session\": params.session\n            }\n          }\n        }\n      });\n    }\n    this.responseValidate(cvRes);\n    const cvResults = cvRes.data.response.results;\n\n    this.informOutside(cvResults);\n\n    console.log('CV 数据', cvRes.cv);\n    console.log('人才画像数据', cvRes.talent_profile);\n    this.setState({\n      cv: cvResults.cv,\n      talent: cvResults.talent_profile\n    });\n  };\n\n  responseValidate = (res) => {\n    console.log('res', res);\n    const serverResponse = res.data;\n    if (!serverResponse) {\n      this.setState({ error: true });\n      toast('服务端响应数据为空');\n      throw new Error('服务端响应数据为空');\n    }\n    const trueResponse = serverResponse.response;\n    if (!trueResponse) {\n      this.setState({ error: true });\n      toast('响应对象无 response 域');\n      throw new Error('响应对象无 response 域')\n    }\n    const { err_msg, err_no } = trueResponse;\n    if (err_no !== 0) {\n      this.setState({ error: true });\n      toast(`服务端给出的 err_msg: ${err_msg}`);\n      throw new Error(`服务端给出的 err_msg: ${err_msg}`);\n    }\n  };\n\n  getContent = (showType) => {\n    const { error, position, cv, talent, jd } = this.state;\n\n    if (error) return '加载出错，请稍后重试';\n    if (showType === 'cv') {\n      return (\n        <div>\n          <div className=\"cv\">\n            <h3>CV数据：</h3>\n            {cv ? <JSONTree data={cv} /> : 'Loading...'}\n          </div>\n          <div className=\"talent\">\n            <h3>人才画像数据：</h3>\n            {talent ? <JSONTree data={talent} /> : 'Loading...'}\n          </div>\n        </div>\n      )\n    }\n    if (showType === 'jd') {\n      return (\n        <div>\n          <div className=\"cv\">\n            <h3>JD数据：</h3>\n            {jd ? <JSONTree data={jd} /> : 'Loading...'}\n          </div>\n          <div className=\"talent\">\n            <h3>岗位画像数据：</h3>\n            {position ? <JSONTree data={position} /> : 'Loading...'}\n          </div>\n        </div>\n      );\n    }\n    return 'url 参数错误：无效的 showType';\n  };\n\n  render() {\n    const parsed = queryString.parse(window.location.search);\n\n    return (\n      <div>\n        {/*<ReactJson src={this.state.jd} />*/}\n        {this.getContent(parsed.showType)}\n        <ToastContainer />\n      </div>\n    );\n  }\n}\n\nexport default hot(AppRoot);"],"sourceRoot":""}